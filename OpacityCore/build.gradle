plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
}

android {
    namespace 'com.opacitylabs.opacitycore'
    compileSdk 35

    defaultConfig {
        minSdk 24

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        externalNativeBuild {
            cmake {
                cppFlags "-O2 -frtti -fexceptions -Wall -fstack-protector-all"
                arguments "-DANDROID_STL=c++_shared"
            }
        }

        if (isRunningOnCI()) {
            ndk {
                abiFilters getCurrentArchitecture()
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.35.1'
        }
    }

    publishing {
        singleVariant("release") {
            withSourcesJar()
        }
    }
}

dependencies {
    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.material
    implementation libs.geckoview
    implementation libs.androidx.security.crypto
    implementation libs.kotlinx.serialization.json
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = 'com.opacitylabs'
            artifactId = 'opacitycore'
            version = '0.0.0'

            afterEvaluate {
                from components.release
            }
        }
    }
}

// Function to detect the current architecture
def getCurrentArchitecture() {
    def arch = System.getProperty("os.arch")
    if (arch.contains("aarch64") || arch.contains("arm64")) {
        return "arm64-v8a"
    } else if (arch.contains("x86_64") || arch.contains("amd64")) {
        return "x86_64"
    } else {
        return "x86_64"
    }
}

// Function to check if running on CI in test configuration
def isRunningOnCI() {
    return System.getenv("CI")?.toBoolean() ?: false
}